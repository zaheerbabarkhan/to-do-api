  openapi: 3.0.3
  info:
    title: To-Do OpenAPI 3.0
    description: This is the Open API document5ation for the tod-do app which will let the user to signup and then add the task to their todo task list, user can also delete the task or mark the task as completed.
    version: 1.0.0
    contact: 
      email: email123@gmail.com
  servers:
    - url: http://localhost:3000
  tags:
    - name: User
      description: This contain all the user related APIs like signup and login
    - name: Health-check
      description: This contains the route to check the health of the API wether API isw up or down
    - name: ToDo
      description: Operations related to To-Dos
    - name: Auth
      description: Operation related google and github login
  paths:
    /status-check:
      get:
        tags:
          - Health-check
        summary: Get Server Information
        description: Returns information about the server
        operationId: healthCheck
        responses:
          '200':
            description: success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServerInfo'
    /users:
      post:
        tags:
          - User
        summary: Create user
        description: Takes in the user data and create the user on that data
        operationId: createUser
        requestBody:
          description: Create a new user in the app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUser"
        responses:
          '200':
            description: User will be created successfully
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: "#/components/schemas/CreateUser"
                    - type: object
                      properties:
                        id: 
                          type: integer
                          format: int64
                        statusId:
                          type: integer
                          format: int32
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/BadRequestError"
    /users/confirm-email:
      get:
        tags:
          - User
        summary: Confirm user's email
        description: Confirms the user's email using a token
        operationId: confirmUserEmail
        parameters:
          - name: token
            in: query
            description: The confirmation token received by the user
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Email confirmation successful
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/BadRequestError"
    /users/login:
      post:
        summary: User Login
        description: Log in a user with email and password
        tags:
          - User
        operationId: userLogin
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
        responses:
          '200':
            description: Successful login
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LoginSuccessResponse'
                example:
                  message: Login successful
                  token: <JWT token>
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedResponse'
                example:
                  message: Invalid credentials
    /users/logout:
      post:
        tags:
          - User
        summary: Logout endpoint
        description: Endpoint to log the user out
        operationId: userLogout
        security: 
          - JWTSecurity: []
        responses:
          '200':
            description: Successful logout
            content:
              application/json:
                example:
                  message: User successfully logged out
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedResponse'
                example:
                  message: Invalid credentials
    /users/forgot-password:
      post:
        summary: Request to reset a user's password
        tags:
          - User
        operationId: forgotPassword
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordRequest'
        responses:
          '200':
            description: Password reset request successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '400':
            description: Invalid request or email not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
    /users/new-password:
      put:
        summary: Update user password
        description: Update the user's password securely.
        operationId: newPassword
        security: 
         - JWTSecurity: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPasswordRequest'
        responses:
          '200':
            description: Password updated successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '400':
            description: Bad request. Invalid input or missing parameters.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedResponse'
                example:
                  message: Invalid credentials
    /todos:
      post:
        summary: Create a new To-Do
        tags:
          - ToDo
        security: 
          - JWTSecurity: []
        operationId: createToDo
        requestBody:
          description: To-Do data
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDoCreateRequest'
        responses:
          '201':
            description: To-Do created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ToDoResponse'
      get:
        summary: Get all To-Dos
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: getAllToDos
        responses:
          '200':
            description: To-Dos retrieved successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ToDoResponse'
    /todos/count:
      get:
        summary: Get counts of tasks
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: getToDoCounts
        responses:
          '200':
            description: To-Do counts retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ToDoCountsResponse'
    /todos/perDayCount:
      get:
        summary: Get per-day count of tasks
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: getPerDayCount
        responses:
          '200':
            description: Per-day count retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PerDayCountResponse'
    /todos/overdue-count:
      get:
        summary: Get count of overdue todos
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: getOverdueTodoCount
        responses:
          '200':
            description: Count of overdue todos retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OverdueTodoCountResponse'
    /todos/avgTasksPerDay:
      get:
        summary: Get average tasks completed per day
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: getAvgCompletedPerDay
        responses:
          '200':
            description: Average tasks completed per day retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AvgCompletedPerDayResponse'

    /todos/maxTasksDay:
      get:
        summary: Get the day with the maximum tasks completed
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: getDayWithMaxCompletedTasks
        responses:
          '200':
            description: Day with max completed tasks retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DayWithMaxCompletedTasksResponse'
    /todos/similar:
      get:
        tags:
          - ToDo
        summary: Get similar todos
        description: Retrieve todos grouped by similar titles.
        security:
          - JWTSecurity: []
        operationId: getSimilars
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SimilarTodosGroup'
    /todos/{id}:
      put:
        summary: Update a specific To-Do by ID
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: updateToDo
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
        requestBody:
          description: Updated To-Do data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDoUpdateRequest'
        responses:
          '200':
            description: To-Do updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ToDoResponse'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
      get:
        summary: Get a specific To-Do by ID
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: getToDoById
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
            description: The ID of the To-Do to retrieve
        responses:
          '200':
            description: To-Do retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ToDoResponse'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
      delete:
        summary: Delete a specific To-Do by ID
        tags:
          - ToDo
        security:
          - JWTSecurity: []
        operationId: deleteToDo
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
            description: The ID of the To-Do to delete
        responses:
          '204':
            description: To-Do deleted successfully
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
    /auth/google:
      get:
        tags:
          - Auth
        summary: Authenticate with Google
        description: |
          Initiate the authentication process with Google OAuth 2.0.
          This returns the Google OAuth URL for redirection.
        responses:
          '200':
            description: Successful response will redirect the user to google auth
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GoogleAuthResponse'
    /auth/google/callback:
      get:
        tags:
          - Auth
        summary: Google OAuth Callback
        x-middleware:
          - passportGoogle
        description: |
          Endpoint for handling the callback from Google OAuth.
          After successful authentication, Google will redirect users to this URL.
        operationId: OAUTHLogin
        parameters:
          - name: code
            in: query
            description: The authorization code received from Google.
            schema:
              type: string
          - name: scope
            in: query
            description: The state parameter received from Google.
            schema:
              type: string
            style: form
            allowReserved: true
          - name: authuser
            in: query
            description: The state parameter received from Google.
            schema:
              type: string
          - name: prompt
            in: query
            description: The state parameter received from Google.
            schema:
              type: string

        responses:
          '200':
            description: Successful callback
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LoginSuccessResponse'
          '400':
            description: Successful callback
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
    /auth/github:
      get:
        tags:
          - Auth
        summary: Authenticate with GitHUb
        description: |
          Initiate the authentication process with GitHub OAuth 2.0.
          This returns the GitHub OAuth URL for redirection.
        responses:
          '200':
            description: Successful response will redirect the user to GitHub auth
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GitHubAuthResponse'
    /auth/github/callback:
      get:
        tags:
          - Auth
        summary: GitHub OAuth Callback
        x-middleware:
          - passportGitHub
        description: |
          Endpoint for handling the callback from GitHub OAuth.
          After successful authentication, GitHub will redirect users to this URL.
        operationId: OAUTHLogin
        parameters:
          - name: code
            in: query
            description: The authorization code received from GitHub.
            schema:
              type: string
          - name: scope
            in: query
            description: The state parameter received from GitHub.
            schema:
              type: string
            style: form
            allowReserved: true
          - name: authuser
            in: query
            description: The state parameter received from GitHub.
            schema:
              type: string
          - name: prompt
            in: query
            description: The state parameter received from GitHub.
            schema:
              type: string

        responses:
          '200':
            description: Successful callback
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LoginSuccessResponse'
          '400':
            description: Successful callback
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
    
  components:
    schemas:
      ServerInfo:
        type: object
        properties:
          uptimeInSeconds:
            type: integer
          message:
            type: string
          date:
            type: string
      CreateUser:
        required:
          - firstName
          - lastName
          - email
          - password
        type: object
        properties:
          firstName:
            type: string
            example: Jhon
            minLength: 1
            maxLength: 20
          lastName:
            type: string
            minLength: 1
            maxLength: 20
            example: Doe
          email: 
            type: string
            maxLength: 250
            example: user1@gmail.com
          password: 
            type: string
            minLength: 8
            maxLength: 15
            example: BEdZ4xbYwr6w0Fs
      BadRequestError:
        type: object
        properties:
          message:
            type: string
          errors:
            type: array
            items:
              type: object
              properties:
                errorCode:
                  type: string
                message:
                  type: string
                path:
                  type: string 
      UserLogin:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            format: email
            description: User's email address
          password:
            type: string
            description: User's password
      LoginSuccessResponse:
        type: object
        properties:
          message:
            type: string
            description: Success message
          token:
            type: string
            description: JWT token
      ToDoCreateRequest:
        type: object
        properties:
          title:
            type: string
          description:
            type: string
          dueDate:
            type: string  # Assuming dueDate is a string for simplicity
        required:
          - title
          - dueDate
      PerDayCountResponse:
        type: array
        items:
          type: object
          properties:
            dayOfWeek:
              type: number
              description: Numeric representation of the day of the week (0 for Sunday, 1 for Monday, etc.)
            countPerDay:
              type: number
              description: Count of tasks created on the specified day of the week
      ToDoUpdateRequest:
        type: object
        properties:
          title:
            type: string
          description:
            type: string
          dueDate:
            type: string
            # 
          markCompleted:
            type: boolean
        minProperties: 1
        maxProperties: 3
      ToDoCountsResponse:
        type: object
        properties:
          totalCount:
            type: integer
            description: Total count of all tasks
          totalCompleted:
            type: integer
            description: Count of tasks with statusId 'completed'
          totalPending:
            type: integer
            description: Count of tasks with statusId 'pending'
      ToDoResponse:
        type: object
        properties:
          id:
            type: integer
          title:
            type: string
          description:
            type: string
          dueDate:
            type: string  # Assuming dueDate is a string for simplicity
            
          createdAt:
            type: string  # Assuming createdAt is a string for simplicity
            
          updatedAt:
            type: string  # Assuming updatedAt is a string for simplicity
            
          completedAt:
            type: string
            
      OverdueTodoCountResponse:
        type: object
        properties:
          count:
            type: integer
            description: Count of overdue todos
      DayWithMaxCompletedTasksResponse:
        type: object
        properties:
          date:
            type: string
            
          count:
            type: integer
            description: Count of tasks completed on the day
      AvgCompletedPerDayResponse:
        type: object
        properties:
          avg:
            type: integer
            description: Count of avg completed tasks per day
      SimilarTodosGroup:
        type: object
        properties:
          title:
            type: string
            description: The title of the similar todos group.
          todos:
            type: array
            items:
              $ref: '#/components/schemas/ToDoResponse'
      GoogleAuthResponse:
          type: object
          properties:
            url:
              type: string
              description: The URL to redirect to Google for authentication
      GitHubAuthResponse:
          type: object
          properties:
            url:
              type: string
              description: The URL to redirect to GitHub for authentication
      ForgotPasswordRequest:
        type: object
        properties:
          email:
            type: string
            format: email
        required:
          - email
      NewPasswordRequest:
        type: object
        properties:
          newPassword:
            type: string
            description: The new password for the user.
        required:
          - newPassword
      SuccessResponse:
        type: object
        properties:
          message:
            type: string
            description: A success message
        required:
          - message
      UnauthorizedResponse:
        type: object
        properties:
          message:
            type: string
            description: Error message
      
      NotFoundError:
        type: object
        properties:
          message:
            type: string
        required:
          - message
      
    securitySchemes:
      JWTSecurity:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT        
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            